<?php
/**
 * @file
 * Code for the supercookie module.
 */

/**
 * Internal function to check if supercookie_update_7104() has been run.
 *
 * If code has been updated to 7104 but update.php not run yet, code would
 * attempt to query for `supercookie.modified` db field, throw a PDOException,
 * and cause WSOD for any user on any non-admin page -- including /user which
 * may be needed to log in and run update.php in the first place!
 * Use this function to check for and avoid that.
 */
function _supercookie_check_db_updated_7104() {
  $updated = &drupal_static(__FUNCTION__, 'NOT_SET');

  if ($updated === 'NOT_SET') {
    $updated = db_field_exists('supercookie', 'modified');

    if (!$updated) {
      // This permission is checked for access to update.php (unless settings.php
      // has granted "update free access"...but we don't really want to show
      // just anyone this message).
      // @see update_access_allowed()
      if (user_access('administer software updates')) {
        drupal_set_message(t("%module will <strong>NOT</strong> run properly until you have run <code>update.php</code> (or <code>drush updatedb</code>)! <a href=\"@update-url\">Please do so now.</a>", array(
          '%module' => "Supercookie",
          '@update-url' => url('update.php'),
        )), 'error', FALSE);
      }
    }

  }

  return $updated;
}
/**
 * Implements hook_init().
 *
 * Runs _supercookie_check_db_updated_7104() early in page load, to ensure
 * getting the error message onto the first admin page load.
 */
function supercookie_init() {
  _supercookie_check_db_updated_7104();
}

/**
 * Wrapper function for variable_get.
 */
function _supercookie_variable_get($name) {

  $defaults = &drupal_static(__FUNCTION__, array());
  if (empty($defaults)) {
    $defaults = array(
      'supercookie_expire' => 86400,
      'supercookie_pageview_average' => 20,
      'supercookie_name_header' => 'X-Drupal-Supercookie',
      'supercookie_name_server' => 'drupal-supercookie',
      'supercookie_honor_dnt' => TRUE,
      'supercookie_track_nid' => FALSE,
      'supercookie_track_tid' => FALSE,
      'supercookie_external_js' => TRUE,
      'supercookie_mongodb' => FALSE,
    );
  }

  if ($name == 'supercookie_mongodb') {
    return (!empty(variable_get($name, $defaults[$name])) && extension_loaded('mongo'));
  }

  return variable_get($name, $defaults[$name]);
}
/**
 * Gets a human-readable array from raw supercookie values.
 */
function _supercookie_get_human_data($object) {

  $mongo = _supercookie_variable_get('supercookie_mongodb');
  $account = user_load($object->uid);

  $human = array(
    'user' => (!empty($account->name) ? $account->name : t('anonymous')),
    'cookie' => $object->scid,
    'hash' => $object->data,
    'created' => format_date($object->created, 'e'),
    'modified' => format_date(REQUEST_TIME, 'e'),
    'expires' => format_date($object->expires, 'e'),
  );

  // Try to unserialize row blobs.
  if (!$mongo) {
    $tid = unserialize($object->tid);
    $nid = unserialize($object->nid);
    $custom = unserialize($object->custom);

    if ($tid !== FALSE) {
      $object->tid = $tid;
    }
    if ($nid !== FALSE) {
      $object->nid = $nid;
    }
    if ($custom !== FALSE) {
      $object->custom = unserialize($object->custom);
      $human['custom'] = $object->custom;
    }
  }

  // Add term names + counts to response.
  if (!empty($object->tid)) {

    $human['terms'] = taxonomy_term_load_multiple(array_keys($object->tid));
    foreach ($human['terms'] as &$term) {
      $term = (object) array(
        $term->name => $object->tid[$term->tid],
      );
    }
    $human['terms'] = array_values($human['terms']);
  }

  // Add node titles + counts to response.
  if (!empty($object->nid)) {
    $human['nodes'] = node_load_multiple(array_keys($object->nid));
    foreach ($human['nodes'] as &$node) {
      $node = (object) array(
        $node->title => $object->nid[$node->nid],
      );
    }
    $human['nodes'] = array_values($human['nodes']);
  }

  return $human;
}
/**
 * Helper function for setting and getting the supercookie.
 */
function supercookie_instance() {

  // Avoid WSOD by cutting off if udpate.php has not run for 7104.
  if (!_supercookie_check_db_updated_7104()) {
    return;
  }


  module_load_include('inc', 'supercookie');

  $args = drupal_get_query_parameters();
  $supercookie = NULL;

  if (drupal_get_path_alias() == drupal_get_path_alias('supercookie')) {
    if (!empty($args['client']) && !empty($args['date'])) {
      // Set client + server data.
      $data = array(
        'server' => array(
          'REMOTE_ADDR' => ip_address(),
          'REMOTE_HOST' => gethostbyaddr(ip_address()),
          'HTTP_USER_AGENT' => $_SERVER['HTTP_USER_AGENT'],
          'HTTP_ACCEPT' => $_SERVER['HTTP_ACCEPT'],
        ),
        'client' => $args['client'],
      );

      $hash = md5(serialize($data));

      // Insert or update supercookie instance.
      $supercookie = new SuperCookie();
      $supercookie = $supercookie
        ->match($hash)
        ->save($args['date']);

      $_SESSION['supercookie'] = $hash;

      // Track entity views; also note the "ref" arg's controlling JS var.
      // @see Drupal.behaviors.supercookie.entitiesTracked
      if (!empty($args['ref'])) {
        // Get the current node menu object.
        $menu_item = menu_get_item(drupal_get_normal_path($args['ref']));

        // Gather nid and tid values from current node entity.
        if (!empty($menu_item['map'][0]) && $menu_item['map'][0] == 'node') {
          // Get a list of all taxonomy_term fields.
          $fields_term = &drupal_static(__FUNCTION__ . '_fields_term');
          if (empty($fields_term)) {
            $fields = field_info_field_map();
            $fields_term = array();
            foreach ($fields as $field_name => &$meta) {
              if ($meta['type'] == 'taxonomy_term_reference') {
                $fields_term[] = $field_name;
              }
            }
          }

          $node = $menu_item['map'][1];
          $tid = array();
          foreach ($fields_term as $field_name) {
            if (!empty($node->{$field_name})) {
              $items = field_get_items('node', $node, $field_name);
              foreach ($items as &$term) {
                $tid[] = $term['tid'];
              }
            }
          }
          // Increment entity view counts.
          $supercookie = $supercookie->trackNodes(array($node->nid));
          if (!empty($tid)) {
            $supercookie = $supercookie->trackTerms($tid);
          }
        }
      }

    }
  }

  if (empty($supercookie)) {
    $supercookie = new SuperCookie();
    $supercookie = $supercookie
      ->match($_SESSION['supercookie']);
  }

  // Return supercookie object.
  return $supercookie;
}

/**
 * Implements hook_library().
 */
function supercookie_library() {

  $libraries = array();

  $libraries['json.prune'] = array(
    'title' => 'JSON.prune',
    'website' => 'https://github.com/Canop/JSON.prune',
    'version' => '1.0',
    'js' => array(
      'sites/all/libraries/JSON.prune.js' => array(),
    ),
  );

  $libraries['cryptojs.md5'] = array(
    'title' => 'CryptoJS.MD5',
    'website' => 'https://code.google.com/p/crypto-js/#MD5',
    'version' => '3.1.2',
    'js' => array(
      'sites/all/libraries/md5.js' => array(),
    ),
  );

  return $libraries;
}
/**
 * Implements hook_menu().
 */
function supercookie_menu() {

  $items['admin/config/people/supercookie'] = array(
    'title' => 'Supercookie',
    'description' => 'Configure sitewide settings for the supercookie.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('supercookie_settings_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer supercookie'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/reports/supercookie'] = array(
    'title' => 'Supercookie JSON report',
    'description' => 'Transforms and dumps all current data to a JSON blob, suitable for use in other systems (e.g. a CRM).',
    'page callback' => 'supercookie_json_report',
    'access callback' => 'user_access',
    'access arguments' => array('administer supercookie'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['supercookie'] = array(
    'title' => 'Supercookie callback',
    'page callback' => 'supercookie_json',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}
/**
 * Implements hook_permission().
 */
function supercookie_permission() {
  return array(
    'administer supercookie' => array(
      'title' => t('Administer supercookie'),
    ),
  );
}
/**
 * Implements hook_cron().
 */
function supercookie_cron() {

  // Clean up expired/abandoned records.
  $count = 0;
  $interval = _supercookie_variable_get('supercookie_expire');
  if ($interval !== 'calendar_day') {
    $count = db_delete('supercookie')
      ->where("(created + :interval) > expires", array(
        ':interval' => $interval,
      ))
      ->execute();
  }
  else {
    $count = db_delete('supercookie')
      ->where("expires < UNIX_TIMESTAMP(DATE_FORMAT(FROM_UNIXTIME(created) + INTERVAL 1 DAY, :date_format))", array(
        ':date_format' => '%Y-%m-%d',
      ))
      ->execute();
  }

  if (!empty($count)) {
    watchdog('supercookie', 'Pruned @count from supercookie.', array(
      '@count' => $count . format_plural($count, ' fingerprint record', ' fingerprint records'),
    ), WATCHDOG_INFO);
  }

}
/**
 * Implements template_preprocess_html().
 */
function supercookie_preprocess_html(&$vars) {

  // Don't init if we're on admin pages.
  $is_admin = path_is_admin(drupal_get_path_alias());
  if ($is_admin) {
    return;
  }

  // Cut off if update.php has not run for 7104 yet.
  if (!_supercookie_check_db_updated_7104()) {
    return;
  }

  $supercookie = supercookie_instance();

  $once = &drupal_static('supercookie', FALSE);
  if (empty($once) && empty($supercookie->dnt)) {
    if (!empty($supercookie->scid)) {
      drupal_add_http_header(_supercookie_variable_get('supercookie_name_header'), $supercookie->data);
      setcookie(_supercookie_variable_get('supercookie_name_server'), $supercookie->data, $supercookie->expires, '/');
    }
    else {
      drupal_add_http_header(_supercookie_variable_get('supercookie_name_header'), '');
      setcookie(_supercookie_variable_get('supercookie_name_server'), '', 0);
    }

    $_SERVER['HTTP_' . str_replace('-', '_', drupal_strtoupper(_supercookie_variable_get('supercookie_name_header')))] = $supercookie->data;
    $once = TRUE;
  }

  if (_supercookie_variable_get('supercookie_external_js')) {
    drupal_add_js('//rawgit.com/Canop/JSON.prune/master/JSON.prune.js', 'external');
    drupal_add_js('//crypto-js.googlecode.com/svn/tags/3.1.2/build/rollups/md5.js', 'external');
  }
  else {
    drupal_add_library('supercookie', 'json.prune');
    drupal_add_library('supercookie', 'cryptojs.md5');
  }

  drupal_add_js(drupal_get_path('module', 'supercookie') . '/supercookie.js', array(
    'scope' => 'header',
    'weight' => -1000,
  ));

  drupal_add_js(array(
    'supercookie' => array(
      'dnt' => !empty($supercookie->dnt),
      'scid' => $supercookie->scid,
      'hash' => $supercookie->data,
      'json' => '/' . drupal_get_path_alias('supercookie'),
      'name_server' => _supercookie_variable_get('supercookie_name_server'),
      'name_header' => _supercookie_variable_get('supercookie_name_header'),
    ),
  ), 'setting');

}
/**
 * Menu callback for storing and printing data gathered client + server side.
 */
function supercookie_json() {

  // Flush data to client.
  $supercookie = supercookie_instance();

  if (empty($supercookie->dnt)) {
    // TODO: Check to make sure this negates the need for cacheexclude contrib
    // on sites using Varnish proxy.
    drupal_add_http_header('Cache-Control', 'no-cache, no-store, must-revalidate');
    drupal_add_http_header('Pragma', 'no-cache');
    drupal_add_http_header('Expires', '0');
    drupal_add_http_header(_supercookie_variable_get('supercookie_name_header'), $supercookie->data);
    setcookie(_supercookie_variable_get('supercookie_name_server'), $supercookie->data, $supercookie->expires, '/');
  }

  drupal_json_output(array(
    'scid' => $supercookie->scid,
    'hash' => $supercookie->data,
    'expires' => $supercookie->expires,
  ));
}
/**
 * Menu callback to dump a JSON blob of all current, transformed supercookie data.
 */
function supercookie_json_report() {

  $data = array();
  $results = db_select('supercookie', 'sc')
    ->fields('sc', array(
      'scid',
      'uid',
      'created',
      'modified',
      'expires',
      'data',
      'tid',
      'nid',
      'custom',
    ))
    ->execute();

  while ($row = $results->fetch()) {
    $human = _supercookie_get_human_data($row);

    // Allow other modules to customize each row as needed (e.g. per its own
    // usage of the "custom" field).
    drupal_alter(__FUNCTION__, $human);

    $data[] = $human;
  }

  drupal_add_http_header('Cache-Control', 'no-cache, no-store, must-revalidate');
  drupal_add_http_header('Pragma', 'no-cache');
  drupal_add_http_header('Expires', '0');
  drupal_json_output($data);
}

/**
 * Administrative settings for Supercookie.
 */
function supercookie_settings_form($form, &$form_state) {

  global $databases;

  $supercookie = supercookie_instance();

  // Make sure drupal_check_module is defined.
  // @see https://www.drupal.org/node/2258019
  include_once DRUPAL_ROOT . '/includes/install.inc';
  drupal_check_module('supercookie');

  drupal_set_message(t('Changing the %expiration, %cookie or %header values will invalidate all current supercookie data. Users will receive a new supercookie when they next visit the site.', array(
    '%expiration' => t('Cookie expiration'),
    '%cookie' => t('Cookie name'),
    '%header' => t('HTTP header'),
  )), 'warning', FALSE);

  $form['intro'] = array(
    '#markup' => '<p>' . t("Supercookie values will be unique across !report within the specified expiration interval.</p><p>You can access the supercookie object in PHP like this <code>\$supercookie = supercookie_instance();</code>", array(
      '!report' => l(t('all site visitors'), 'admin/reports/supercookie', array(
        'attributes' => array(
          'target' => '_blank',
        ),
      )),
    )) . '</p>',
  );

  $period_expire = array(
    'calendar_day' => t('Calendar day'),
  ) + drupal_map_assoc(array(
    300, 900, 1800, 3600, 10800, 21600, 32400, 43200, 86400, 172800, 345600, 604800, 2419200, 7776000, 31536000,
  ), 'format_interval');
  $period_pageview = drupal_map_assoc(array(
    5, 10, 20, 30, 60, 120, 300, 900, 1800, 3600, 10800, 21600, 32400, 43200,
  ), 'format_interval');
  $libraries = module_invoke('supercookie', 'library');

  $form['options'] = array(
    '#type' => 'fieldset',
    '#title' => t('Options'),
    '#collapsible' => TRUE,
  );

  $form['options']['supercookie_expire'] = array(
    '#type' => 'select',
    '#title' => t('Cookie expiration'),
    '#description' => t('All site visitors will have a unique supercookie within this interval.'),
    '#default_value' => _supercookie_variable_get('supercookie_expire'),
    '#options' => $period_expire,
  );

  $form['options']['supercookie_pageview_average'] = array(
    '#type' => 'select',
    '#title' => t('Page view average'),
    '#description' => t("This interval represents the average page view time for users on your site. You can use the number reported by your site's metrics service provider, or make a reasonable guess."),
    '#default_value' => _supercookie_variable_get('supercookie_pageview_average'),
    '#options' => $period_pageview,
  );

  $form['options']['supercookie_track_nid'] = array(
    '#type' => 'checkbox',
    '#title' => t('Track view count of node pages.'),
    '#default_value' => _supercookie_variable_get('supercookie_track_nid'),
  );

  if (module_exists('taxonomy')) {
    $form['options']['supercookie_track_tid'] = array(
      '#type' => 'checkbox',
      '#title' => t('Track view count of terms on node pages.'),
      '#default_value' => _supercookie_variable_get('supercookie_track_tid'),
    );
  }

  $form['options']['supercookie_honor_dnt'] = array(
    '#type' => 'checkbox',
    '#title' => t("Honor users' !dnt browser settings.", array(
      '!dnt' => l(t('DNT'), 'https://en.wikipedia.org/wiki/Do_Not_Track', array(
        'attributes' => array(
          'target' => '_blank',
        ),
      )),
    )),
    '#description' => t('It is recommended that responsible site owners leave this option enabled. In keeping with the spirit of this option, legacy data collected for individual users will be removed if they have the DNT browser setting enabled.'),
    '#default_value' => _supercookie_variable_get('supercookie_honor_dnt'),
  );

  $form['options']['supercookie_external_js'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use external JavaScript libraries (not recommended for production sites).'),
    '#description' => t('If left unchecked, you will need to download the !md5 and !jsonprune scripts and save them to the sites/all/libraries directory.', array(
      '!md5' => l($libraries['cryptojs.md5']['title'], $libraries['cryptojs.md5']['website'], array(
        'attributes' => array(
          'target' => '_blank',
        ),
      )),
      '!jsonprune' => l($libraries['json.prune']['title'], $libraries['json.prune']['website'], array(
        'attributes' => array(
          'target' => '_blank',
        ),
      )),
    )),
    '#default_value' => _supercookie_variable_get('supercookie_external_js'),
  );

  $mongodb_conn = <<<MONGODB
\$conf['mongodb_connections'] = array(
  'default' => array(
    'host' => 'mongodb://localhost:27017',
    'db' => '{$databases['default']['default']['database']}',
  ),
);
MONGODB;
  $form['options']['supercookie_mongodb'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use MongoDB collection for data storage (recommended for high traffic sites).'),
    '#description' => t("If you have the PECL mongo extension enabled and want to use MongoDB for data storage, you'll just need to add connection info in settings.php:<br /><br /><pre>@mongodb_conn</pre>", array(
      '@mongodb_conn' => $mongodb_conn,
    )),
    '#default_value' => _supercookie_variable_get('supercookie_mongodb'),
    '#disabled' => !extension_loaded('mongo'),
  );

  $form['obfuscation'] = array(
    '#type' => 'fieldset',
    '#title' => t('Obfuscation'),
    '#description' => t("Supercookies have been criticized as a means of silently gathering user data. While this module only stores a hash of the user agent and server-side variables collected from the user, you may still wish to obfuscate the default machine names and !alias (the current alias is %alias).", array(
      '!alias' => l(t('alias the "supercookie" path'), 'admin/config/search/path'),
      '%alias' => drupal_get_path_alias('supercookie'),
    )),
    '#collapsible' => TRUE,
  );

  $form['obfuscation']['supercookie_name_server'] = array(
    '#type' => 'textfield',
    '#title' => t('Cookie name'),
    '#default_value' => _supercookie_variable_get('supercookie_name_server'),
    '#required' => TRUE,
    '#maxlength' => 20,
  );

  $form['obfuscation']['supercookie_name_header'] = array(
    '#type' => 'textfield',
    '#title' => t('HTTP header'),
    '#default_value' => _supercookie_variable_get('supercookie_name_header'),
    '#required' => TRUE,
    '#maxlength' => 20,
  );

  $form = system_settings_form($form);

  $form['#submit'][] = 'supercookie_settings_form_submit';

  return $form;
}
/**
 * Additional submit handler for settings form.
 */
function supercookie_settings_form_submit($form, &$form_state) {

  drupal_get_messages();
  drupal_set_message(t('The configuration options have been saved.'));

  $truncate = FALSE;
  if (!$truncate && _supercookie_variable_get('supercookie_expire') != $form['options']['supercookie_expire']['#default_value']) {
    $truncate = TRUE;
  }
  if (!$truncate && _supercookie_variable_get('supercookie_name_server') != $form['obfuscation']['supercookie_name_server']['#default_value']) {
    $truncate = TRUE;
  }
  if (!$truncate && _supercookie_variable_get('supercookie_name_header') != $form['obfuscation']['supercookie_name_header']['#default_value']) {
    $truncate = TRUE;
  }
  if ($truncate) {
    if (_supercookie_variable_get('supercookie_mongodb')) {
      $conf = variable_get('mongodb_connections');
      $client = new MongoClient($conf['default']['host']);
      $client
        ->selectCollection($conf['default']['db'], 'supercookie')
        ->drop();
    }
    else {
      db_delete('supercookie')
        ->execute();
    }

    drupal_set_message(t('Cleared all supercookie sessions.'));
  }
  else {
    drupal_set_message(t('All data has been preserved.'));
  }

}
