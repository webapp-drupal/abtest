<?php

/**
 * @file
 * visitor_profile.module
 * Implements visitor profile creating functionality
 * V.Charinas
 */

require dirname(__FILE__) . '/visitor_profile.entity.inc';
/**
 * Implements hook_init().
 */
    
function visitor_profile_init() {

global $base_url;
 

 $cookie_domain = ($_SERVER['HTTP_HOST'] != 'localhost') ? $_SERVER['HTTP_HOST'] : false;
 $cookie_name = 'ns_website';
 $cookie_value_ip = ip_address();
 $cookie_path =  $base_url.'/'.current_path();
 
 //cookie set for the visitor identification in case dinamic ip is changed 
 if (!isset($_COOKIE[$cookie_name])) { 
 setcookie($cookie_name, $cookie_value_ip, time() + 31556926, $cookie_path, $cookie_domain); // 31556926 = 1 year;
 }
 //setcookie($cookie_name, $cookie_value_ip, time() + 31556926, $cookie_path, $cookie_domain, false); // 31556926 = 1 year;
 
 //drupal_set_message (t('Boot fired.. '.'Visitor with domain: '.$_COOKIE[$cookie_name]).' detected', 'sucsess');

}

/**
*  Implements hook_theme().
*/
function visitor_profile_theme($existing, $type, $theme, $path) {
        $theme = array();
        $theme['poll_results'] = array(
          'render element' => 'content',
          'base hook' => 'poll',
          'template' => 'poll-results--visitor-profile',
          'path' => drupal_get_path('module', 'visitor_profile') . '/templates',
         );
        return $theme;
}

 /**
  * Implements hook_form_alter().
  */
function visitor_profile_form_alter (&$form, &$form_state, $form_id) {
            //dpm($form_id);//get the form_id
        
            //hook the poll form
        if ($form_id == 'poll_view_voting') {

                $form['vote']['#submit'] = array('visitor_profile_submit_handler','poll_vote');
                return $form;

    }
}

function visitor_profile_submit_handler() {

    require 'includes/vendor/autoload.php';//geoip run
    


    $time = time();
    $host = ip_address();//ip to track
    if ($host ==='::1') {
    $host = '81.241.174.202'; //debug value as on local machine i have only ::1 value
    }
  
    $reader = new GeoIp2\Database\Reader( drupal_get_path('module', 'visitor_profile') . '/includes/GeoLite2-City.mmdb');
    $record = $reader->city($host);//in debug mode

    
 // if cookie exists and the value equals to fetched ip or cookies value not equals to fetched ip
    if(isset($_COOKIE['ns_website']) && $_COOKIE['ns_website'] != '::1' ) {
        drupal_set_message(t("WE are in! here we'll' create the profile for the voited visitor COOKIE here"));
        // if (exists($profile)) {
        //         drupal_set_message(t("Profile already exists"));
        // } //if profile exists end
        //  else {
        //create entity
        $entity = entity_create('profile', array('type' =>'profile'));
        $entity->profiles_host = $host;
        $entity->created = $time;
        $entity->country_name = $record->country->name;
        $entity->country_code = $record->country->isoCode;
        $entity->city         = $record->city->name;
        $entity->postal_code  = $record->postal->code;
        $entity->latitude     = $record->location->latitude;
        $entity->longitude    = $record->location->longitude;


        entity_save('profile', $entity);

        //}//else end


        

       
    } else {

    drupal_set_message(t("WE are in! here we'll' create the profile for the voited visitor"));
    }
    
}

/**
 *  Implements hook_profile_personal_form
 *  personal question form for poll
 *  @ingroup forms
 *  
 */

function visitor_profile_personal_form($form, &$form_state, $nid){
    $form_title = '';
    $form_state['cache'] = TRUE;
    // Store the nid so we can get to it in submit functions.
    $form['#nid'] = $nid;
    //load node to fetch field
    $node = node_load($nid);
    //dpm($node);
    if (!empty($node->field_personal_question)) {
        $form_title = $node->field_personal_question['und'][0]['value'];

    } else {
        $form_title = 'Question not set form not displayed';
    }
    //dpm($form_title);
    
    //build our form
    $form['description'] = array(
        '#type' => 'item',
        '#title' => t($form_title),
    );
    $form['answer'] = array (
        '#type' => 'textfield',
        '#title' => t('Your Answer'),

    );
    
    $form['submit'][]= array(
    '#type' => 'submit',
    '#value' => t('Submit your answer'),
    '#submit' => array('visitor_profile_personal_question_submit_handler')
  );
  //dpm($form);
  return $form;
}

function visitor_profile_personal_question_submit_handler($form, &$form_state) {

    drupal_set_message(t('yehh for fucks sake'));
    //here we saving answer property of the 
    
    drupal_set_message(t('Submitting values: @values', array('@values' => $form_state['values']['answer'])));
    //drupal_set_message(t('You entered %input', array('%input' => $form_state['values']['answer'])));
    //dpm($form_state);

}


/*
 * Implements  hook_profile_preprocess_poll_results
 * Preprocess Poll results adding personal question if it was set
 */


function visitor_profile_preprocess_poll_results(&$variables) {

    $variables['personal_form'] = array();// defining variables for form
    $elements = drupal_get_form('visitor_profile_personal_form', $variables['nid']);// getting elements such as form handler with passing node id to it
    $node = node_load($variables['nid']);//getting node object to set if statement
    //dpm($node);
    if (!empty($node->field_personal_question['und'][0]['value']) && $node->field_collect_personal_info['und'][0]['value'] == '1') {
    $variables['persinal_form'] = drupal_render($elements);
    
    }
   
}

/**
 * Implements hook_views_api().
 * Creating the view for our custom table to create user profile page
 */
function visitor_profile_views_api() {
    return array(
      'api' => 3,
      'path' => drupal_get_path('module', 'visitor_profile') . '/views',
    );
}
  