<?php

/**
 * @file
 * Implements A/B Testing for the node bundle Blogs when checked to Engage the test (checkbox). And Fields for testing headlines are filled in
 * 
 * V.Charinas
 * 
 * # BEFORE TESTS #
 *  
 *    Create fields for the default Article content type machine name Blogs
 *      1. field type bolean field_ab_test
 *      2. field type text   field_headline_a
 *      3. field type text   field_headline_a
 *    probably needs to be implemented in .install file - this is posible upgrade
 * 
 * # MODULE FUNCTIONALITY #
 * 
 *    module depends on A/B test module 
 *    name = "A/B test (core)
 *    description = An A/B testing API for creating tests quickly in code. 
 *    ---------------------------------------------------------------------
 *   # IN MODULE #
 *
 *    WE do call all nodes in required conditions by EntityFieldQuery 
 *    with checking all required conditions
 *    before performing any tests and checking does it have to be tested and required information is entered 
 *    it is filtred by query but to test fields are not empty will be extra care and helpfull ! Headline A and Headline B not empty !
 * 
 *    1 geting nodes in a loop we are fetching title and url of the filtered Node
 *    2 set the test id for each node required testing
 *    3 run test and modify url to provide GA access to results
 *    4 collect results 
 *    5 display results for node in node tab no additional permissions required
 *    6 display page with all tests results performed on admin accessable page (requires permission view results page)
 * 
 * 
 *  Searching for the nodes with the engaged A/B test on it and gets all required fields
  * /
  * getting the required fields to be used in the test
 */
/**
 * Implements hook_menu().
 */

function abtest_headlines_menu() {
  $items = array();
  $items['abtest-headlines'] = array(
    'title' => 'A/B test example',
    'description' => 'Demonstrates using the abtest module.',
    'access callback' => TRUE,
    'page callback' => 'abtest_headlines_results_node_tab',
    'type' => MENU_NORMAL_ITEM,
  );

    return $items;
}

/*
*  Implements EntityFieldQuery results
*/

function abtest_headlines_query_nodes() {

  //Query the nodes    
          $query = new EntityFieldQuery;
          $result = $query
          ->entityCondition('entity_type', 'node')
          ->entityCondition('bundle', 'blogs')
          ->propertyCondition('status', 1)
          ->fieldCondition('field_ab_test_boolean', 'value', 1, '=')
          ->fieldCondition('field_headline_a', 'value', '', '!=')
          ->fieldCondition('field_headline_b', 'value', '', '!=')
          ->execute();
  
  
          return $result;
  
  }

/*
*   Implements test page
*/
  function abtest_headlines_results_node_tab() {
        //abtest_track_conversion('abtest_example'); //that will be counting results

       
        $node_id = '';
        $node_title ='';
        $headingA = '';
        $headingB = '';
        $output = '';//lets display them
        //getting required nodes to test
        $nodes = array_keys( abtest_headlines_query_nodes()['node']); //reusing query in function
    
            foreach ($nodes as $node){
    
              $node = node_load($node);
              
              $node_id = $node->nid;
              $node_test_id ='abtest_headlines'.'_'.$node_id;
              $headingA = $node->field_headline_a[LANGUAGE_NONE] [0] ['value']; // string to be removed
              $headingB = $node->field_headline_b[LANGUAGE_NONE] [0] ['value']; // string to be removed
              //Output will be removed when it will be unnessesary 
              $output .= '<p>'.$node_id.'</p>';
              $output .= '<h4>'.$node_test_id. '</h4>';
              
              //it is not real test but emulating behaviour 
              if ((int)$node_id > 22) {
                
        
                $node->title = $headingA;
                $path = url(drupal_get_path_alias('node/' . $node->nid), array(
                    'query' => array (
                    'utm_source'=>'Home Page',
                    'utm_medium'=>'website',
                    'utm_campaign'=>'AB Test',
                    'utm_content'=>'HeadlineA'),
                    'absolute' => TRUE,
                  )
                );
                $node->path = array('alias' => $path);//node does not updating url
                  
                node_save($node);
              //dpr ($path); $node->path = array('alias' => $path);
              
              $output .= '<h3>'.t('TITLE VARIANT A: ').$node->title.'</h3>'.'<p>'.$node->path['alias'].'</p>';
              
              }
              else {
                //dpr ((int)$node_id);
                $node->title = $headingB;
                $path = url(drupal_get_path_alias('node/' . $node->nid), array(
                  'query' => array (
                  'utm_source'=>'Home Page',
                  'utm_medium'=>'website',
                  'utm_campaign'=>'AB Test',
                  'utm_content'=>'HeadlineB'),
                  'absolute' => TRUE,
                )
              );
                $node->path = array('alias' => $path);
                node_save($node);
                
                $output .= '<h3>'.t('TITLE VARIANT B: ').$node->title.'</h3>'.'<p>'.$node->path['alias'].'</p>';
                
              }
       
      }
      return $output;
      //return node_view_multiple($nodes, 'teaser');
    }



  /*
  *  Generates conversion page for the admin 
  */
  
  // function abtest_headlines_admin_dashboard () {
  //   //abtest_track_conversion('abtest_example');


  //   return  '<h2>' . t('Admin dashboard should be here.') . '</h2>';

  // }
    
   
   
  // }
  
 /**
  * Generates A/B test for the Nodes 
  */

 
//  function abtest_headlines_nodes() {


//     // test variations in core WOW  SOLUTION 
//     if (abtest('$node_test_id')){

//         //Variation Headline A
//          $node_title = $headingA;
//          $Url = $Url.$ga_tracking_path_A;

//     }
//     else{

//         //Variation Headline B
//        $node_title = $headingB;
//        $Url = $Url.$ga_tracking_path_B;


//     }

//     return $output;

//  }

